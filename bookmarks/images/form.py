from django import forms
from .models import Image  # Importation du mod√®le Image depuis vos mod√®les
import requests  # Module pour effectuer des requ√™tes HTTP (utile pour t√©l√©charger une image √† partir d'une URL)
from django.core.files.base import ContentFile  # Utilis√© pour traiter le contenu binaire des fichiers
from django.utils.text import slugify  # Convertit les cha√Ænes de caract√®res en un format "slugifi√©" (URL-friendly)

# D√©finition d'un formulaire pour cr√©er une instance du mod√®le Image
class ImageCreateForm(forms.ModelForm):
    class Meta:
        # Sp√©cifie que ce formulaire est li√© au mod√®le Image
        model = Image
        # D√©finition des champs √† inclure dans le formulaire
        fields = ['title', 'url', 'description']
        # Configuration des widgets (pour personnaliser l'affichage des champs)
        widgets = {
            'url': forms.HiddenInput(),  # Le champ URL sera cach√© dans le formulaire
        }

    # M√©thode pour valider le champ 'url' avant de sauvegarder les donn√©es
    def clean_url(self):
        # R√©cup√®re la valeur du champ 'url' nettoy√© (cleaned_data contient les donn√©es valides)
        url = self.cleaned_data['url']
        # Liste des extensions valides pour les images
        valid_extensions = ['.jpg', '.jpeg', '.png']
        # R√©cup√®re l'extension du fichier en divisant l'URL √† partir du dernier point
        extension = url.rsplit('.', 1)[1].lower()
        # V√©rifie si l'extension est valide
        if extension not in valid_extensions:
            # Si non, l√®ve une exception ValidationError
            raise forms.ValidationError('The given URL does not match valid image extensions.')
        return url  # Retourne l'URL valid√©e

    # M√©thode pour sauvegarder l'instance du formulaire (et effectuer des actions suppl√©mentaires)
    def save(self, force_insert=False, force_update=False, commit=True):
        # Appelle la m√©thode save() parente mais sans sauvegarder imm√©diatement dans la base de donn√©es
        image = super().save(commit=False)
        # R√©cup√®re l'URL de l'image depuis les donn√©es valid√©es
        image_url = self.cleaned_data['url']
        # G√©n√®re un nom de fichier unique bas√© sur le titre de l'image
        name = slugify(image.title)  # Convertit le titre en un slug (e.g., "Mon Image" -> "mon-image")
        # R√©cup√®re l'extension du fichier depuis l'URL
        extension = image_url.rsplit('.', 1)[1].lower()
        # Combine le slug et l'extension pour cr√©er un nom de fichier
        image_name = f'{name}.{extension}'
        
        # T√©l√©charge l'image depuis l'URL sp√©cifi√©e
        response = requests.get(image_url)
        # Sauvegarde l'image dans le champ `image` du mod√®le en utilisant son contenu binaire
        image.image.save(
            image_name,  # Nom du fichier de l'image
            ContentFile(response.content),  # Contenu binaire de l'image t√©l√©charg√©e
            save=True  # Enregistre imm√©diatement le fichier
        )
        # Si `commit` est True, enregistre l'objet dans la base de donn√©es
        if commit:
            image.save()
        # Retourne l'instance de l'image sauvegard√©e
        return image


"""
### R√©sum√© des √©tapes importantes :
1. **Validation de l'URL** :
   - V√©rifie que l'URL pointe vers un fichier d'image ayant une extension valide (`.jpg`, `.jpeg`, `.png`).

2. **T√©l√©chargement et sauvegarde de l'image** :
   - T√©l√©charge l'image depuis l'URL fournie via une requ√™te HTTP (`requests.get()`).
   - G√©n√®re un nom de fichier bas√© sur le titre de l'image en format slugifi√©.
   - Sauvegarde l'image dans le champ fichier de l'objet Image avec le contenu t√©l√©charg√©.

3. **Personnalisation de la sauvegarde** :
   - Le formulaire utilise la m√©thode `save()` pour g√©rer les actions suppl√©mentaires avant d'enregistrer l'objet dans la base de donn√©es, notamment l'attribution de l'image t√©l√©charg√©e.

Ce processus garantit que seules des images valides sont accept√©es, et que l'image est correctement t√©l√©charg√©e et associ√©e au mod√®le. üñºÔ∏è‚úîÔ∏è
"""